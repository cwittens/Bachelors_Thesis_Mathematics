


####################################################################################################
# THE HAMILTON EQUATIONS ARE WRONG AND DO NOT SIMULATE THE CORRECT BEHAVIOUR OF THE RATTLEBACK     #
# more about this in the my thesis (which because of copyright concerns is not public in the repo) #
# write me if you want to know more about this.                                                    #
####################################################################################################


#=
I solved the Hamilton equations in naive_hamilton_from_mathematica.nb and exported the results to a text file. 
This was however made for Fortran, so still a few modifications were needed to make it work in Julia.
This was done by "str + h" to replace/change the following
Cos -> cos
Sin -> sin
Sqrt -> sqrt
Derivative(1)(α)(t)  -> alpha_dot
Derivative(1)(β)(t)  -> beta_dot
Derivative(1)(γ)(t)  -> gamma_dot
** -> ^
.* -> *
=#




# taken from pa_from _angle.txt
function pa_from_anlges(alpha, beta, gamma, alpha_dot, beta_dot, gamma_dot, g, m, h, a, b, c, A, B, C, F)
    return ((A*cos(beta)^2 + C*sin(beta)^2)*alpha_dot - cos(beta)*(F*beta_dot + (F*sin(alpha) + (A - C)*cos(alpha)*sin(beta))*gamma_dot) + (m*(2*b^2*sin(alpha)*sin(beta)*(b^2*sin(alpha)*(sin(beta)*alpha_dot + cos(alpha)*cos(beta)*gamma_dot) - (c^2*cos(alpha)*cos(beta) - h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(beta_dot + sin(alpha)*gamma_dot)) + 2*b^2*cos(beta)*sin(alpha)*(b^2*cos(beta)*sin(alpha)*alpha_dot + cos(alpha)*sin(beta)*(a^2*beta_dot + (a - b)*(a + b)*sin(alpha)*gamma_dot)) + 2*(cos(alpha)*(c^2*cos(beta)^2 + a^2*sin(beta)^2) - h*cos(beta)*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(a^2*cos(alpha)*sin(beta)*(sin(beta)*alpha_dot + cos(alpha)*cos(beta)*gamma_dot) + (c^2*cos(alpha)*cos(beta) - h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(cos(beta)*alpha_dot - cos(alpha)*sin(beta)*gamma_dot))))/(2*(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2))))
end

function pb_from_anlges(alpha, beta, gamma, alpha_dot, beta_dot, gamma_dot, g, m, h, a, b, c, A, B, C, F)
    return (-(F*cos(beta)*alpha_dot) + B*beta_dot + (B*sin(alpha) + F*cos(alpha)*sin(beta))*gamma_dot + (m*(2*(-(c^2*cos(alpha)*cos(beta)) + h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(b^2*sin(alpha)*(sin(beta)*alpha_dot + cos(alpha)*cos(beta)*gamma_dot) - (c^2*cos(alpha)*cos(beta) - h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(beta_dot + sin(alpha)*gamma_dot)) + 2*a^2*cos(alpha)*sin(beta)*(b^2*cos(beta)*sin(alpha)*alpha_dot + cos(alpha)*sin(beta)*(a^2*beta_dot + (a - b)*(a + b)*sin(alpha)*gamma_dot))))/(2*(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2))))
end

function pg_from_anlges(alpha, beta, gamma, alpha_dot, beta_dot, gamma_dot, g, m, h, a, b, c, A, B, C, F)
    return (-(cos(beta)*(F*sin(alpha) + (A - C)*cos(alpha)*sin(beta))*alpha_dot) + (B*sin(alpha) + F*cos(alpha)*sin(beta))*beta_dot + (B*sin(alpha)^2 + F*sin(2*alpha)*sin(beta) + cos(alpha)^2*(C*cos(beta)^2 + A*sin(beta)^2))*gamma_dot + (m*(2*sin(alpha)*((b - c)*(b + c)*cos(alpha)*cos(beta) + h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(b^2*sin(alpha)*(sin(beta)*alpha_dot + cos(alpha)*cos(beta)*gamma_dot) - (c^2*cos(alpha)*cos(beta) - h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(beta_dot + sin(alpha)*gamma_dot)) + 2*(a - b)*(a + b)*cos(alpha)*sin(alpha)*sin(beta)*(b^2*cos(beta)*sin(alpha)*alpha_dot + cos(alpha)*sin(beta)*(a^2*beta_dot + (a - b)*(a + b)*sin(alpha)*gamma_dot)) + 2*cos(alpha)*sin(beta)*((a - c)*(a + c)*cos(alpha)*cos(beta) + h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(a^2*cos(alpha)*sin(beta)*(sin(beta)*alpha_dot + cos(alpha)*cos(beta)*gamma_dot) + (c^2*cos(alpha)*cos(beta) - h*sqrt(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2)))*(cos(beta)*alpha_dot - cos(alpha)*sin(beta)*gamma_dot))))/(2*(b^2*sin(alpha)^2 + cos(alpha)^2*(c^2*cos(beta)^2 + a^2*sin(beta)^2))))
end


# taken from Hamilton_alphadotsimply.txt
function alphadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
    return ((
        -(
            (
                cos(alpha)^4 * (
                    -(c^4 * C * (B + (c^2 + h^2) * m) * pa * cos(beta)^6) - c^4 * C * F * pb * cos(beta)^7 + b^4 * F * h * m * pa * sec(alpha) * sin(2 * beta) * tan(alpha)^3 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) - (a^2 * b^2 * sec(alpha)^2 * sin(beta)^4 * tan(alpha) * ((-2 * F^2 + b^2 * m * (B + h^2 * m) + A * (2 * B + (a^2 + 2 * h^2) * m) + h^2 * m * (2 * B + (a^2 + 2 * h^2) * m)) * pa * sin(2 * alpha) + 2 * F * h * m * pg * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) / 2.0 - a^4 * sin(beta)^6 * ((-F^2 + A * (B + (a^2 + h^2) * m) + h^2 * m * (B + (a^2 + h^2) * m)) * pa + F * h * m * pb * sec(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) - (b^4 * sec(alpha)^2 * sin(beta)^2 * tan(alpha)^3 * ((-F^2 + A * (B + h^2 * m) + (b^2 + h^2) * m * (B + h^2 * m)) * pa * sin(2 * alpha) + 2 * F * h * m * (pg - pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) / 2.0 + a^2 * m * sec(alpha)^2 * sin(beta)^5 * (-(a^2 * b^2 * F * pa * sin(2 * alpha)) + h * (a^2 * (B + (a^2 + h^2) * m) * pg + (A * b^2 - a^4 * m + b^2 * h^2 * m - a^2 * (B - b^2 * m + h^2 * m)) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * m * sec(alpha)^2 * sin(beta)^3 * tan(alpha)^2 * (-(a^2 * b^2 * F * pa * sin(2 * alpha)) + h * (a^2 * (B + (b^2 + h^2) * m) * pg + (A * b^2 + b^2 * (b^2 + h^2) * m - a^2 * (B + (b^2 + h^2) * m)) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) - cos(beta)^5 * (c^2 * pb * (F * (c^2 * C + a^4 * m + a^2 * (2 * C - c^2 * m)) * sin(beta)^2 - (-(c^2 * F^2) + a^2 * b^2 * C * m - c^4 * C * m - c^2 * C * h^2 * m + a^2 * b^2 * c^2 * m^2 - a^2 * c^4 * m^2 - b^2 * c^4 * m^2 + c^6 * m^2 + a^2 * b^2 * h^2 * m^2 - 3 * a^2 * c^2 * h^2 * m^2 - 3 * b^2 * c^2 * h^2 * m^2 + 6 * c^4 * h^2 * m^2 + c^2 * h^4 * m^2 + B * c^2 * (-C + (-a^2 + c^2 + h^2) * m) + A * c^2 * (B + (-b^2 + c^2 + h^2) * m)) * sin(beta) * tan(alpha) + b^2 * F * (2 * C + (b^2 - c^2) * m) * tan(alpha)^2) + c^4 * sec(alpha) * ((-(B * C) - F^2 - c^2 * C * m - C * h^2 * m + B * (-a^2 + c^2 + h^2) * m - a^2 * c^2 * m^2 + c^4 * m^2 - 3 * a^2 * h^2 * m^2 + 6 * c^2 * h^2 * m^2 + h^4 * m^2 + A * (B + (c^2 + h^2) * m)) * pg * sin(beta) + b^2 * F * m * pg * tan(alpha) - 2 * C * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) - cos(beta)^2 * (a^2 * sin(beta)^4 * ((a^6 * m^2 + a^4 * m * (B + C - 2 * c^2 * m + h^2 * m) + A * c^2 * (2 * B + (a^2 + c^2 + 2 * h^2) * m) + a^2 * (B * (C - 2 * c^2 * m) + m * (C * h^2 + c^4 * m - 5 * c^2 * h^2 * m)) + c^2 * (-2 * F^2 + m * (B * c^2 + 2 * B * h^2 + 6 * c^2 * h^2 * m + 2 * h^4 * m))) * pa + (a^2 + c^2) * F * h * m * pb * sec(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + (b^2 * sec(alpha)^2 * sin(beta)^2 * tan(alpha) * ((a^4 * m * (B + C + (b^2 + h^2) * m) + A * c^2 * (2 * B + (c^2 + 2 * h^2) * m) + a^2 * (2 * B * C + B * (b^2 - 2 * c^2) * m + 2 * C * h^2 * m - 2 * c^2 * (b^2 + 3 * h^2) * m^2) + c^2 * (-2 * F^2 + m * (B * c^2 + 2 * B * h^2 + 6 * c^2 * h^2 * m + 2 * h^4 * m + b^2 * (B + (c^2 + h^2) * m)))) * pa * sin(2 * alpha) + 2 * F * h * m * ((-a^2 + c^2) * pg + (2 * a^2 - c^2) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) / 2.0 - b^2 * m * sec(alpha)^2 * sin(beta) * tan(alpha)^2 * (-(b^2 * c^2 * F * pa * sin(2 * alpha)) + h * (2 * c^2 * (A + B - C + b^2 * m + 2 * h^2 * m) * pg - a^2 * (B + (b^2 + h^2) * m) * pg + (-2 * B * c^2 + A * (b^2 - 2 * c^2) + 2 * c^2 * C + b^4 * m - 2 * b^2 * c^2 * m + b^2 * h^2 * m - 4 * c^2 * h^2 * m + a^2 * (B + (b^2 + h^2) * m)) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + m * sec(alpha)^2 * sin(beta)^3 * (2 * a^2 * b^2 * c^2 * F * pa * sin(2 * alpha) - h * (-(a^2 * (a^4 * m + a^2 * (B + h^2 * m) - c^2 * (2 * A + 3 * B - 2 * C + 3 * c^2 * m + 5 * h^2 * m)) * pg) + (a^6 * m + a^2 * (-3 * B * c^2 + A * (b^2 - 2 * c^2) + 2 * c^2 * C - 2 * b^2 * c^2 * m - 3 * c^4 * m + b^2 * h^2 * m - 5 * c^2 * h^2 * m) + a^4 * (B + (b^2 + h^2) * m) + b^2 * c^2 * (A + (3 * c^2 + h^2) * m)) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^4 * tan(alpha)^3 * ((C * h^2 * m + B * (C + b^2 * m)) * pa * tan(alpha) - F * h * m * pg * sec(alpha)^2 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) + F * h * m * pb * sec(alpha) * tan(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) - c^2 * cos(beta)^4 * (sin(beta)^2 * ((A * c^2 * (B + (c^2 + h^2) * m) + a^4 * m * (B + C + (c^2 + h^2) * m) + c^2 * (-F^2 + m * (B * (c^2 + h^2) + (c^4 + 6 * c^2 * h^2 + h^4) * m)) + a^2 * (2 * B * (C - c^2 * m) + m * (2 * C * h^2 - 2 * c^4 * m + c^2 * (C - 6 * h^2 * m)))) * pa + a^2 * F * h * m * pb * sec(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) - m * sec(alpha)^2 * sin(beta) * (-(b^2 * c^2 * F * pa * sin(2 * alpha)) + h * (2 * c^2 * (A + B - C + 2 * c^2 * m + 2 * h^2 * m) * pg - a^2 * (B + (3 * c^2 + h^2) * m) * pg + (-2 * B * c^2 + A * (b^2 - 2 * c^2) + 2 * c^2 * C + 3 * b^2 * c^2 * m - 4 * c^4 * m + b^2 * h^2 * m - 4 * c^2 * h^2 * m + a^2 * (B + (-2 * b^2 + 3 * c^2 + h^2) * m)) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * tan(alpha) * ((C * (c^2 + 2 * h^2) * m + B * (2 * C + b^2 * m)) * pa * tan(alpha) - F * h * m * pg * sec(alpha)^2 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) + F * h * m * pb * sec(alpha) * tan(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) - cos(beta) * sin(beta) * (pb * (a^4 * F * (C + (a^2 - c^2) * m) * sin(beta)^5 + a^2 * (a^6 * m^2 - a^4 * m * (A - B - C + b^2 * m + c^2 * m) + b^2 * c^2 * m * (A + 3 * h^2 * m) - a^2 * (-(B * C) - F^2 + B * c^2 * m + b^2 * C * m + B * h^2 * m - C * h^2 * m - b^2 * c^2 * m^2 + b^2 * h^2 * m^2 + 3 * c^2 * h^2 * m^2 + h^4 * m^2 + A * (B + h^2 * m))) * sin(beta)^4 * tan(alpha) - a^2 * b^2 * F * (-2 * C + (a^2 - b^2) * m) * sin(beta)^3 * tan(alpha)^2 - b^2 * (-(a^4 * m * (-A + B + C + b^2 * m)) - b^2 * c^2 * m * (A + (b^2 + 3 * h^2) * m) + a^2 * (-2 * B * C - 2 * F^2 + B * c^2 * m + b^2 * C * m + 2 * B * h^2 * m - 2 * C * h^2 * m + b^4 * m^2 + b^2 * c^2 * m^2 + 2 * b^2 * h^2 * m^2 + 3 * c^2 * h^2 * m^2 + 2 * h^4 * m^2 + 2 * A * (B + h^2 * m))) * sin(beta)^2 * tan(alpha)^3 + b^4 * F * (C + (-2 * a^2 + b^2 + c^2) * m) * sin(beta) * tan(alpha)^4 - b^4 * (-(B * C) - F^2 + B * h^2 * m - C * h^2 * m + b^2 * h^2 * m^2 + h^4 * m^2 + A * (B + h^2 * m)) * tan(alpha)^5) - sec(alpha) * (a^4 * (F^2 + a^2 * C * m + C * h^2 * m + a^4 * m^2 - a^2 * c^2 * m^2 - 3 * c^2 * h^2 * m^2 - h^4 * m^2 + B * (C + (a^2 - c^2 - h^2) * m) - A * (B + (a^2 + h^2) * m)) * pg * sin(beta)^4 - b^4 * (-(B * C) - F^2 + B * h^2 * m - C * h^2 * m + b^2 * h^2 * m^2 + h^4 * m^2 + A * (B + h^2 * m)) * pg * tan(alpha)^4 + a^2 * b^2 * sin(beta)^2 * tan(alpha) * (-((2 * A * B - 2 * B * C - 2 * F^2 - a^2 * C * m - 2 * C * h^2 * m + A * (a^2 + 2 * h^2) * m + B * (-a^2 + c^2 + 2 * h^2) * m - a^2 * b^2 * m^2 + b^2 * c^2 * m^2 + b^2 * h^2 * m^2 + 3 * c^2 * h^2 * m^2 + 2 * h^4 * m^2) * pg * tan(alpha)) + 2 * F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) - b^2 * m * sin(beta) * tan(alpha)^2 * (b^2 * (2 * a^2 - c^2) * F * pg * tan(alpha) + 2 * h * (-(c^2 * (A + B + b^2 * m + 2 * h^2 * m)) + a^2 * (B + (b^2 + h^2) * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + a^2 * m * sin(beta)^3 * (-(b^2 * (2 * a^2 - c^2) * F * pg * tan(alpha)) + 2 * h * (-(a^4 * m) + c^2 * (A + B + 2 * h^2 * m) - a^2 * (B + (-c^2 + h^2) * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))))) +
                    cos(beta)^3 * (-(pb * (a^2 * F * (a^2 * C + 2 * c^2 * C + a^4 * m - c^4 * m) * sin(beta)^4 + (a^6 * (-b^2 + c^2) * m^2 + a^4 * m * (-(A * c^2) + 2 * B * c^2 - b^2 * C + c^2 * C + b^2 * c^2 * m - b^2 * h^2 * m + 3 * c^2 * h^2 * m) + b^2 * c^4 * m * (A + (c^2 + 3 * h^2) * m) - a^2 * c^2 * (2 * A * B - 2 * B * C - 2 * F^2 + b^2 * C * m - c^2 * C * m - 2 * C * h^2 * m + 2 * B * (c^2 + h^2) * m + A * (-b^2 + c^2 + 2 * h^2) * m + b^2 * c^2 * m^2 + c^4 * m^2 - 2 * b^2 * h^2 * m^2 + 9 * c^2 * h^2 * m^2 + 2 * h^4 * m^2)) * sin(beta)^3 * tan(alpha) + b^2 * F * (a^4 * m + a^2 * (2 * C + (b^2 - 4 * c^2) * m) + c^2 * (2 * C + (b^2 + c^2) * m)) * sin(beta)^2 * tan(alpha)^2 + b^2 * (2 * c^2 * F^2 - a^2 * b^2 * C * m + c^4 * C * m + 2 * c^2 * C * h^2 * m - a^2 * b^4 * m^2 + a^2 * b^2 * c^2 * m^2 + b^4 * c^2 * m^2 - b^2 * c^4 * m^2 - a^2 * b^2 * h^2 * m^2 + 3 * a^2 * c^2 * h^2 * m^2 + 2 * b^2 * c^2 * h^2 * m^2 - 6 * c^4 * h^2 * m^2 - 2 * c^2 * h^4 * m^2 + B * c^2 * (2 * C + (a^2 - c^2 - 2 * h^2) * m) - A * c^2 * (2 * B + (-b^2 + c^2 + 2 * h^2) * m)) * sin(beta) * tan(alpha)^3 + b^4 * F * (C + (b^2 - c^2) * m) * tan(alpha)^4)) + c^2 * sec(alpha) * (a^2 * (2 * F^2 + a^2 * C * m + c^2 * C * m + 2 * C * h^2 * m + a^4 * m^2 - c^4 * m^2 + 3 * a^2 * h^2 * m^2 - 9 * c^2 * h^2 * m^2 - 2 * h^4 * m^2 + 2 * B * (C + (a^2 - c^2 - h^2) * m) - A * (2 * B + (a^2 + c^2 + 2 * h^2) * m)) * pg * sin(beta)^3 + b^2 * m * tan(alpha)^2 * (-(b^2 * F * pg * tan(alpha)) + 2 * C * h * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * sin(beta) * tan(alpha) * (-((2 * A * B - 2 * B * C - 2 * F^2 - c^2 * C * m - 2 * C * h^2 * m + A * (c^2 + 2 * h^2) * m + B * (-a^2 + c^2 + 2 * h^2) * m - a^2 * b^2 * m^2 + b^2 * c^2 * m^2 - 3 * a^2 * h^2 * m^2 + b^2 * h^2 * m^2 + 6 * c^2 * h^2 * m^2 + 2 * h^4 * m^2) * pg * tan(alpha)) + 2 * F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + m * sin(beta)^2 * (-(b^2 * (3 * a^2 - c^2) * F * pg * tan(alpha)) + 2 * h * (a^4 * m + c^2 * (A + B + 2 * (c^2 + h^2) * m) - a^2 * (B - C + (3 * c^2 + h^2) * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))))
                )
            ) / (b^4 * (b^2 * m * (-F^2 + B * (b^2 + h^2) * m) + A * (C * h^2 * m + B * (C + b^2 * m)) + C * (-F^2 + (b^2 + h^2) * m * (B + h^2 * m))) * sin(alpha)^4 - (a^2 * b^2 * ((a^2 + b^2) * F^2 * m - 2 * A * C * (B + h^2 * m) + 2 * C * (F^2 - h^2 * m * (B + h^2 * m))) * sin(2 * alpha)^2 * sin(beta)^2) / 4.0 + 2 * b^2 * m * cos(alpha) * sin(alpha)^2 * (a^2 * b^2 * F * (C + (b^2 + h^2) * m) * sin(alpha) * sin(beta) - c^2 * h * (A * C + C * (b^2 + 2 * h^2) * m + B * (C + b^2 * m)) * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + 2 * m * cos(alpha)^3 * (a^2 * b^2 * c^2 * F * (C + (c^2 + h^2) * m) * cos(beta)^2 * sin(alpha) * sin(beta) + a^4 * b^2 * F * (C + (a^2 + h^2) * m) * sin(alpha) * sin(beta)^3 - c^4 * C * h * (A + B + 2 * (c^2 + h^2) * m) * cos(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * c^2 * h * (A * (C + a^2 * m) + C * (B + (a^2 + 2 * h^2) * m)) * cos(beta) * sin(beta)^2 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^4 * (c^4 * C * (-F^2 + A * (B + (c^2 + h^2) * m) + m * (B * (c^2 + h^2) + (c^4 + 6 * c^2 * h^2 + h^4) * m)) * cos(beta)^4 + a^2 * c^2 * m * ((A + B) * c^2 * C + a^2 * (C * (c^2 + h^2) * m + A * (B + C + (c^2 + h^2) * m))) * cos(beta)^2 * sin(beta)^2 + a^4 * (-(C * F^2) - a^2 * F^2 * m + C * h^2 * m * (B + (a^2 + h^2) * m) + A * (C + a^2 * m) * (B + (a^2 + h^2) * m)) * sin(beta)^4 - (a^2 * c^2 * (a^2 * F^2 * m - 2 * A * C * (B + h^2 * m) + 2 * C * (F^2 - h^2 * m * (B + 3 * c^2 * m + h^2 * m))) * sin(2 * beta)^2) / 4.0) + b^2 * cos(alpha)^2 * sin(alpha) * (c^2 * (b^2 * m * (-F^2 + B * (c^2 + h^2) * m) + A * (C * (c^2 + 2 * h^2) * m + B * (2 * C + b^2 * m)) + C * (-2 * F^2 + m * (B * c^2 + 2 * B * h^2 + 6 * c^2 * h^2 * m + 2 * h^4 * m + b^2 * (B + (c^2 + h^2) * m)))) * cos(beta)^2 * sin(alpha) + a^2 * m * ((b^2 * (A * B + C * h^2 * m + B * (C + h^2 * m)) + a^2 * ((b^2 * B + C * h^2) * m + A * (B + C + (b^2 + h^2) * m))) * sin(alpha) * sin(beta)^2 - 2 * c^2 * F * h * m * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) * sin(2 * beta))))
        )
    ))
end

function betadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
    return (((
        -(
            (
                cos(alpha)^4 * (
                    -(c^4 * C * (A + (c^2 + h^2) * m) * pb * cos(beta)^8) + b^4 * F * h * m * pg * sec(alpha)^2 * sin(2 * beta) * tan(alpha)^4 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) - pb * sin(beta)^2 * (2 * a^2 * c^2 * (C * (c^2 + 2 * h^2) * m + A * (2 * C + a^2 * m)) * cos(beta)^4 * sin(beta)^2 + a^4 * (C * h^2 * m + A * (C + a^2 * m)) * sin(beta)^6 + 2 * a^4 * F * (C + a^2 * m) * sin(beta)^5 * tan(alpha) + a^2 * (a^6 * m^2 + A * b^2 * (2 * C + (a^2 + b^2) * m) + a^4 * m * (B + C - 2 * b^2 * m + h^2 * m) + b^2 * m * (2 * C * h^2 + b^2 * (C + h^2 * m)) + a^2 * (B * C + m * (C * h^2 + b^4 * m - 2 * b^2 * (C + h^2 * m)))) * sin(beta)^4 * tan(alpha)^2 + 2 * a^2 * b^2 * F * (2 * C + (a^2 + b^2) * m) * sin(beta)^3 * tan(alpha)^3 + b^2 * (A * b^2 * (C + b^2 * m) + b^2 * (b^2 + h^2) * m * (C + b^2 * m) + a^4 * m * (B + C + (b^2 + h^2) * m) + a^2 * (B * (2 * C + b^2 * m) - 2 * m * (-(C * h^2) + b^4 * m + b^2 * (C + h^2 * m)))) * sin(beta)^2 * tan(alpha)^4 + 2 * b^4 * F * (C + b^2 * m) * sin(beta) * tan(alpha)^5 + b^4 * (C * h^2 * m + B * (C + b^2 * m)) * tan(alpha)^6) - c^4 * C * cos(beta)^7 * (F * pa - 2 * h * m * pb * sec(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + cos(beta)^6 * (c^4 * pg * sec(alpha) * (F * (C + a^2 * m) * sin(beta) + (-F^2 + A * (B + (-b^2 + c^2 + h^2) * m) + m * (B * (c^2 + h^2) + (c^4 + 6 * c^2 * h^2 + h^4 - b^2 * (c^2 + 3 * h^2)) * m)) * tan(alpha)) - c^2 * pb * ((a^4 * A * m + 2 * c^2 * C * (A + (c^2 + h^2) * m) + a^2 * C * (2 * A + (c^2 + 2 * h^2) * m)) * sin(beta)^2 + 2 * c^2 * F * (C + a^2 * m) * sin(beta) * tan(alpha) + (c^6 * m^2 + c^4 * m * (B - 2 * b^2 * m + 6 * h^2 * m) + A * (B * c^2 + b^4 * m + c^2 * (c^2 + h^2) * m + 2 * b^2 * (C - c^2 * m)) + b^2 * m * (2 * C * h^2 + b^2 * (C + h^2 * m)) + c^2 * (-F^2 + m * (b^4 * m + b^2 * (C - 6 * h^2 * m) + h^2 * (B + h^2 * m)))) * tan(alpha)^2)) + sec(alpha) * (a^4 * F * (C + a^2 * m) * pg * sin(beta)^7 + a^2 * b^2 * (B * (2 * C + (a^2 + b^2) * m) + m * (2 * C * h^2 - b^4 * m - b^2 * (C + h^2 * m) + a^2 * (C + (b^2 + h^2) * m))) * pg * sin(beta)^4 * tan(alpha)^3 - b^4 * F * h * m * pb * sin(2 * beta) * tan(alpha)^5 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) + a^4 * sin(beta)^6 * ((B * (C + a^2 * m) + m * (C * h^2 + a^4 * m - b^2 * (C + h^2 * m) + a^2 * (C + (-b^2 + h^2) * m))) * pg * tan(alpha) - F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^4 * sin(beta)^2 * tan(alpha)^4 * ((C * h^2 * m + B * (C + b^2 * m)) * pg * tan(alpha) + F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + a^2 * sin(beta)^5 * tan(alpha) * (b^2 * F * (2 * C + (a^2 + b^2) * m) * pg * tan(alpha) + h * m * (A * b^2 - a^4 * m + b^2 * h^2 * m - a^2 * (B - b^2 * m + h^2 * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * sin(beta)^3 * tan(alpha)^3 * (b^2 * F * (C + b^2 * m) * pg * tan(alpha) + h * m * (A * b^2 + b^2 * (b^2 + h^2) * m - a^2 * (B + (b^2 + h^2) * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) - (cos(beta) * sin(beta) * (-2 * b^4 * (-(B * C) - F^2 + B * h^2 * m - C * h^2 * m + b^2 * h^2 * m^2 + h^4 * m^2 + A * (B + h^2 * m)) * pa * tan(alpha)^5 - b^2 * sec(alpha)^2 * sin(beta)^2 * tan(alpha)^2 * ((-(a^4 * m * (-A + B + C + b^2 * m)) - b^2 * c^2 * m * (A + (b^2 + 3 * h^2) * m) + a^2 * (-2 * B * C - 2 * F^2 + B * c^2 * m + b^2 * C * m + 2 * B * h^2 * m - 2 * C * h^2 * m + b^4 * m^2 + b^2 * c^2 * m^2 + 2 * b^2 * h^2 * m^2 + 3 * c^2 * h^2 * m^2 + 2 * h^4 * m^2 + 2 * A * (B + h^2 * m))) * pa * sin(2 * alpha) + 2 * a^2 * F * h * m * pg * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + 2 * sin(beta)^5 * (a^4 * F * (C + (a^2 - c^2) * m) * pa - 2 * a^2 * c^2 * C * h * m * pb * sec(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * sec(alpha)^2 * sin(beta) * tan(alpha)^3 * (b^2 * F * (C + (-2 * a^2 + b^2 + c^2) * m) * pa * sin(2 * alpha) + 2 * h * m * (-((A * b^2 - 2 * c^2 * C + b^4 * m + b^2 * h^2 * m - 2 * a^2 * (B + (b^2 + h^2) * m)) * pg) + 2 * (A * b^2 - c^2 * C + b^4 * m + b^2 * h^2 * m - a^2 * (B + (b^2 + h^2) * m)) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + sec(alpha)^2 * sin(beta)^3 * tan(alpha) * (a^2 * b^2 * F * (2 * C + (-a^2 + b^2) * m) * pa * sin(2 * alpha) - 2 * h * m * (a^2 * (A * b^2 - 2 * c^2 * C - 2 * a^4 * m + 2 * b^2 * c^2 * m + b^2 * h^2 * m + a^2 * (-2 * B + (b^2 - 2 * (c^2 + h^2)) * m)) * pg + 2 * (a^6 * m + b^2 * c^2 * (C + b^2 * m) + a^4 * (B + (-b^2 + c^2 + h^2) * m) - a^2 * (A * b^2 + b^2 * h^2 * m - c^2 * (C - 2 * b^2 * m))) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + 2 * a^2 * sin(beta)^4 * ((a^6 * m^2 - a^4 * m * (A - B - C + b^2 * m + c^2 * m) + b^2 * c^2 * m * (A + 3 * h^2 * m) - a^2 * (A * B - B * C - F^2 + B * c^2 * m + b^2 * C * m + A * h^2 * m + B * h^2 * m - C * h^2 * m - b^2 * c^2 * m^2 + b^2 * h^2 * m^2 + 3 * c^2 * h^2 * m^2 + h^4 * m^2)) * pa * tan(alpha) + a^2 * F * h * m * pg * sec(alpha)^2 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) - 2 * a^2 * F * h * m * pb * sec(alpha) * tan(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))))) / 2.0 + c^2 * cos(beta)^5 * (-0.5 * (sec(alpha)^2 * (b^2 * F * (2 * C + (b^2 - c^2) * m) * pa * sin(2 * alpha) - 2 * h * m * ((-2 * B * c^2 + A * (b^2 - 2 * c^2) - 4 * c^2 * (c^2 + h^2) * m + b^2 * (3 * c^2 + h^2) * m) * pg + 2 * (B * c^2 + A * (-b^2 + c^2) + b^2 * C + b^4 * m - 3 * b^2 * c^2 * m + 2 * c^4 * m - b^2 * h^2 * m + 2 * c^2 * h^2 * m) * pb * sin(alpha)) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) * tan(alpha)) - sin(beta)^2 * (F * (c^2 * C + a^4 * m + a^2 * (2 * C - c^2 * m)) * pa - 2 * (a^2 + 2 * c^2) * C * h * m * pb * sec(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + sin(beta) * ((-(c^2 * F^2) + a^2 * b^2 * C * m - c^4 * C * m - c^2 * C * h^2 * m + a^2 * b^2 * c^2 * m^2 - a^2 * c^4 * m^2 - b^2 * c^4 * m^2 + c^6 * m^2 + a^2 * b^2 * h^2 * m^2 - 3 * a^2 * c^2 * h^2 * m^2 - 3 * b^2 * c^2 * h^2 * m^2 + 6 * c^4 * h^2 * m^2 + c^2 * h^4 * m^2 + B * c^2 * (-C + (-a^2 + c^2 + h^2) * m) + A * c^2 * (B + (-b^2 + c^2 + h^2) * m)) * pa * tan(alpha) - a^2 * F * h * m * pg * sec(alpha)^2 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) + 2 * a^2 * F * h * m * pb * sec(alpha) * tan(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))) - (cos(beta)^3 * (2 * sin(beta)^4 * (a^2 * F * (a^2 * C + 2 * c^2 * C + a^4 * m - c^4 * m) * pa - 2 * c^2 * (2 * a^2 + c^2) * C * h * m * pb * sec(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * sec(alpha)^2 * sin(beta) * tan(alpha)^2 * (-((-2 * c^2 * F^2 + a^2 * b^2 * C * m - c^4 * C * m - 2 * c^2 * C * h^2 * m + a^2 * b^4 * m^2 - a^2 * b^2 * c^2 * m^2 - b^4 * c^2 * m^2 + b^2 * c^4 * m^2 + a^2 * b^2 * h^2 * m^2 - 3 * a^2 * c^2 * h^2 * m^2 - 2 * b^2 * c^2 * h^2 * m^2 + 6 * c^4 * h^2 * m^2 + 2 * c^2 * h^4 * m^2 + B * c^2 * (-2 * C + (-a^2 + c^2 + 2 * h^2) * m) + A * c^2 * (2 * B + (-b^2 + c^2 + 2 * h^2) * m)) * pa * sin(2 * alpha)) + 2 * F * h * m * ((a^2 - 2 * c^2) * pg - 2 * (a^2 - c^2) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * sec(alpha)^2 * tan(alpha)^3 * (b^2 * F * (C + (b^2 - c^2) * m) * pa * sin(2 * alpha) + 2 * h * m * (-((-2 * B * c^2 + A * (b^2 - 2 * c^2) + (b^4 - 4 * c^2 * h^2 + b^2 * (-2 * c^2 + h^2)) * m) * pg) + 2 * (-(B * c^2) + A * (b^2 - c^2) + (b^4 - 2 * c^2 * h^2 + b^2 * (-c^2 + h^2)) * m) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + sec(alpha)^2 * sin(beta)^2 * tan(alpha) * (b^2 * F * (a^4 * m + a^2 * (2 * C + (b^2 - 4 * c^2) * m) + c^2 * (2 * C + (b^2 + c^2) * m)) * pa * sin(2 * alpha) - 2 * h * m * ((a^4 * (b^2 - 2 * c^2) * m + a^2 * (-4 * B * c^2 + A * (b^2 - 2 * c^2) - 6 * c^2 * (c^2 + h^2) * m + b^2 * (2 * c^2 + h^2) * m) + c^2 * (A * b^2 + b^2 * h^2 * m + c^2 * (-2 * C + 3 * b^2 * m))) * pg - 2 * (a^4 * (b^2 - c^2) * m + a^2 * (-2 * B * c^2 + A * (b^2 - c^2) - 3 * c^2 * (c^2 + h^2) * m + b^2 * (2 * c^2 + h^2) * m) + c^2 * (A * b^2 - c^2 * C - 2 * b^4 * m + b^2 * (-2 * C + 3 * c^2 * m + h^2 * m))) * pb * sin(alpha)) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + 2 * sin(beta)^3 * ((a^6 * (-b^2 + c^2) * m^2 + a^4 * m * (-(A * c^2) + 2 * B * c^2 - b^2 * C + c^2 * C + b^2 * c^2 * m - b^2 * h^2 * m + 3 * c^2 * h^2 * m) + b^2 * c^4 * m * (A + (c^2 + 3 * h^2) * m) - a^2 * c^2 * (2 * A * B - 2 * B * C - 2 * F^2 + b^2 * C * m - c^2 * C * m - 2 * C * h^2 * m + 2 * B * (c^2 + h^2) * m + A * (-b^2 + c^2 + 2 * h^2) * m + b^2 * c^2 * m^2 + c^4 * m^2 - 2 * b^2 * h^2 * m^2 + 9 * c^2 * h^2 * m^2 + 2 * h^4 * m^2)) * pa * tan(alpha) + a^2 * (a^2 + c^2) * F * h * m * pg * sec(alpha)^2 * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)) - 2 * a^2 * (a^2 + c^2) * F * h * m * pb * sec(alpha) * tan(alpha) * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))))) / 2.0 +
                    cos(beta)^2 * (-(pb * (a^2 * (2 * a^4 * A * m + a^2 * (2 * A * C + A * c^2 * m + 2 * C * h^2 * m) + c^2 * C * (2 * A + (c^2 + 2 * h^2) * m)) * sin(beta)^6 + 2 * a^2 * (a^2 + 2 * c^2) * F * (C + a^2 * m) * sin(beta)^5 * tan(alpha) + (a^6 * m * (A + (-2 * b^2 + 2 * c^2 + h^2) * m) + b^2 * c^2 * (C * (c^2 + 2 * h^2) * m + A * (2 * C + b^2 * m) + b^2 * m * (C + (c^2 + h^2) * m)) + a^4 * (-F^2 + A * (B + (2 * b^2 + h^2) * m) + m * (c^2 * C + B * (3 * c^2 + h^2) + 2 * b^4 * m + c^4 * m + 7 * c^2 * h^2 * m + h^4 * m - 2 * b^2 * (C + (c^2 + h^2) * m))) + a^2 * (2 * B * c^2 * C + 2 * A * b^2 * (2 * C + (b^2 - c^2) * m) + m * (c^2 * C * (c^2 + 2 * h^2) + 2 * b^4 * (C + h^2 * m) - 2 * b^2 * (-2 * C * h^2 + c^4 * m + c^2 * (C + 4 * h^2 * m))))) * sin(beta)^4 * tan(alpha)^2 + 2 * b^2 * F * (2 * a^4 * m + a^2 * (2 * C + b^2 * m) + c^2 * (2 * C + b^2 * m)) * sin(beta)^3 * tan(alpha)^3 + b^2 * (2 * A * b^2 * C + 2 * B * c^2 * C + 2 * A * b^4 * m - 2 * A * b^2 * c^2 * m + b^2 * B * c^2 * m + 2 * b^4 * C * m + c^4 * C * m + 2 * b^2 * C * h^2 * m + 2 * c^2 * C * h^2 * m + 2 * b^6 * m^2 - 2 * b^4 * c^2 * m^2 + 2 * b^4 * h^2 * m^2 - 6 * b^2 * c^2 * h^2 * m^2 + a^4 * m * (A + h^2 * m) + a^2 * (-2 * F^2 + 2 * A * (B + h^2 * m) + m * (2 * B * (c^2 + h^2) - 2 * b^4 * m + 2 * h^2 * (3 * c^2 + h^2) * m + b^2 * (B - 2 * C + 2 * c^2 * m - h^2 * m)))) * sin(beta)^2 * tan(alpha)^4 + 2 * b^4 * F * (C + (a^2 + b^2 - c^2) * m) * sin(beta) * tan(alpha)^5 + b^4 * (-F^2 + A * (B + h^2 * m) + (b^2 + h^2) * m * (B + h^2 * m)) * tan(alpha)^6)) + sec(alpha) * (a^2 * (a^2 + 2 * c^2) * F * (C + a^2 * m) * pg * sin(beta)^5 + b^4 * tan(alpha)^4 * ((-F^2 + A * (B + h^2 * m) + (b^2 + h^2) * m * (B + h^2 * m)) * pg * tan(alpha) - F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) - b^2 * sin(beta)^2 * tan(alpha)^2 * (-((a^4 * m * (A + h^2 * m) + c^2 * (B * (2 * C + b^2 * m) - m * (A * b^2 - c^2 * C - 2 * C * h^2 + b^4 * m + 3 * b^2 * h^2 * m)) + a^2 * (-2 * F^2 + 2 * A * (B + h^2 * m) + m * (2 * B * (c^2 + h^2) - b^4 * m + 2 * h^2 * (3 * c^2 + h^2) * m + b^2 * (B - C + 2 * c^2 * m)))) * pg * tan(alpha)) + (2 * a^2 - c^2) * F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + a^2 * sin(beta)^4 * ((a^4 * m * (A + (-b^2 + 2 * c^2 + h^2) * m) + c^2 * (2 * B * C - m * (A * b^2 - C * (c^2 + 2 * h^2) + b^2 * (C + c^2 * m + 4 * h^2 * m))) + a^2 * (-F^2 + A * (B + h^2 * m) + m * (c^2 * C + B * (3 * c^2 + h^2) + c^4 * m + 7 * c^2 * h^2 * m + h^4 * m - b^2 * (C + (c^2 + h^2) * m)))) * pg * tan(alpha) - (a^2 + c^2) * F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + b^2 * sin(beta) * tan(alpha)^3 * (b^2 * F * (C + (2 * a^2 + b^2 - 2 * c^2) * m) * pg * tan(alpha) + h * m * (-2 * B * c^2 + A * (b^2 - 2 * c^2) + 2 * c^2 * C + b^4 * m - 2 * b^2 * c^2 * m + b^2 * h^2 * m - 4 * c^2 * h^2 * m + a^2 * (B + (b^2 + h^2) * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + sin(beta)^3 * tan(alpha) * (b^2 * F * (3 * a^4 * m + c^2 * (2 * C + b^2 * m) + a^2 * (2 * C + (b^2 - c^2) * m)) * pg * tan(alpha) + h * m * (a^6 * m + a^2 * (-3 * B * c^2 + A * (b^2 - 2 * c^2) + 2 * c^2 * C - 2 * b^2 * c^2 * m - 3 * c^4 * m + b^2 * h^2 * m - 5 * c^2 * h^2 * m) + a^4 * (B + (b^2 + h^2) * m) + b^2 * c^2 * (A + (3 * c^2 + h^2) * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))))) - cos(beta)^4 * (pb * ((a^6 * A * m + a^4 * C * (A + h^2 * m) + c^4 * C * (A + (c^2 + h^2) * m)) * sin(beta)^4 + 2 * c^2 * (2 * a^2 + c^2) * F * (C + a^2 * m) * sin(beta)^3 * tan(alpha) + (a^4 * m * (A * (b^2 + c^2) + (b^4 - 2 * b^2 * c^2 + c^4 + c^2 * h^2) * m) + a^2 * (2 * c^6 * m^2 + c^4 * m * (3 * B - 2 * (b^2 - 6 * h^2) * m) + A * (2 * B * c^2 + b^4 * m + c^2 * (c^2 + 2 * h^2) * m + 2 * b^2 * (C - c^2 * m)) + b^2 * m * (2 * C * h^2 + b^2 * (C + h^2 * m)) - 2 * c^2 * (F^2 - h^2 * m * (B + h^2 * m) + b^2 * m * (C + 4 * h^2 * m))) + c^2 * (B * c^2 * C + 2 * A * b^2 * (2 * C + (b^2 - c^2) * m) + m * (c^2 * C * (c^2 + h^2) + 2 * b^4 * (C + (c^2 + h^2) * m) + b^2 * (4 * C * h^2 - 2 * c^4 * m + 2 * c^2 * (C - 3 * h^2 * m))))) * sin(beta)^2 * tan(alpha)^2 + 2 * b^2 * c^2 * F * (2 * C + (2 * a^2 + b^2 - c^2) * m) * sin(beta) * tan(alpha)^3 + b^2 * (b^2 * (b^2 + h^2) * m * (C + b^2 * m) + c^4 * m * (B + (b^2 + 6 * h^2) * m) + A * (2 * B * c^2 + b^4 * m + c^2 * (c^2 + 2 * h^2) * m + b^2 * (C - 2 * c^2 * m)) + c^2 * (-2 * F^2 + m * (-2 * b^4 * m + b^2 * (B - 5 * h^2 * m) + 2 * h^2 * (B + h^2 * m)))) * tan(alpha)^4) - c^2 * sec(alpha) * ((2 * a^2 + c^2) * F * (C + a^2 * m) * pg * sin(beta)^3 + b^2 * tan(alpha)^2 * ((-2 * F^2 + A * (2 * B + (-b^2 + c^2 + 2 * h^2) * m) + m * (B * c^2 + 2 * B * h^2 - b^4 * m + 6 * c^2 * h^2 * m + 2 * h^4 * m + b^2 * (B + c^2 * m - 2 * h^2 * m))) * pg * tan(alpha) - F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + sin(beta)^2 * ((a^4 * m * (A + (-b^2 + c^2 + h^2) * m) + c^2 * (B * C + m * (-(A * b^2) + h^2 * (C - 3 * b^2 * m) + c^2 * (C - b^2 * m))) + a^2 * (2 * A * B - 2 * F^2 + A * (-b^2 + c^2 + 2 * h^2) * m + m * (B * (3 * c^2 + 2 * h^2) + 2 * (c^4 + 6 * c^2 * h^2 + h^4) * m - b^2 * (C + c^2 * m + 4 * h^2 * m)))) * pg * tan(alpha) - a^2 * F * h * m * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2))) + sin(beta) * tan(alpha) * (b^2 * F * (2 * C + (3 * a^2 + b^2 - 2 * c^2) * m) * pg * tan(alpha) + h * m * (-2 * B * c^2 + A * (b^2 - 2 * c^2) + 2 * c^2 * C + 3 * b^2 * c^2 * m - 4 * c^4 * m + b^2 * h^2 * m - 4 * c^2 * h^2 * m + a^2 * (B + (-2 * b^2 + 3 * c^2 + h^2) * m)) * pa * sqrt(cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2 + b^2 * tan(alpha)^2)))))
                )
            ) / (b^4 * (b^2 * m * (-F^2 + B * (b^2 + h^2) * m) + A * (C * h^2 * m + B * (C + b^2 * m)) + C * (-F^2 + (b^2 + h^2) * m * (B + h^2 * m))) * sin(alpha)^4 - (a^2 * b^2 * ((a^2 + b^2) * F^2 * m - 2 * A * C * (B + h^2 * m) + 2 * C * (F^2 - h^2 * m * (B + h^2 * m))) * sin(2 * alpha)^2 * sin(beta)^2) / 4.0 + 2 * b^2 * m * cos(alpha) * sin(alpha)^2 * (a^2 * b^2 * F * (C + (b^2 + h^2) * m) * sin(alpha) * sin(beta) - c^2 * h * (A * C + C * (b^2 + 2 * h^2) * m + B * (C + b^2 * m)) * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + 2 * m * cos(alpha)^3 * (a^2 * b^2 * c^2 * F * (C + (c^2 + h^2) * m) * cos(beta)^2 * sin(alpha) * sin(beta) + a^4 * b^2 * F * (C + (a^2 + h^2) * m) * sin(alpha) * sin(beta)^3 - c^4 * C * h * (A + B + 2 * (c^2 + h^2) * m) * cos(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * c^2 * h * (A * (C + a^2 * m) + C * (B + (a^2 + 2 * h^2) * m)) * cos(beta) * sin(beta)^2 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^4 * (c^4 * C * (-F^2 + A * (B + (c^2 + h^2) * m) + m * (B * (c^2 + h^2) + (c^4 + 6 * c^2 * h^2 + h^4) * m)) * cos(beta)^4 + a^2 * c^2 * m * ((A + B) * c^2 * C + a^2 * (C * (c^2 + h^2) * m + A * (B + C + (c^2 + h^2) * m))) * cos(beta)^2 * sin(beta)^2 + a^4 * (-(C * F^2) - a^2 * F^2 * m + C * h^2 * m * (B + (a^2 + h^2) * m) + A * (C + a^2 * m) * (B + (a^2 + h^2) * m)) * sin(beta)^4 - (a^2 * c^2 * (a^2 * F^2 * m - 2 * A * C * (B + h^2 * m) + 2 * C * (F^2 - h^2 * m * (B + 3 * c^2 * m + h^2 * m))) * sin(2 * beta)^2) / 4.0) + b^2 * cos(alpha)^2 * sin(alpha) * (c^2 * (b^2 * m * (-F^2 + B * (c^2 + h^2) * m) + A * (C * (c^2 + 2 * h^2) * m + B * (2 * C + b^2 * m)) + C * (-2 * F^2 + m * (B * c^2 + 2 * B * h^2 + 6 * c^2 * h^2 * m + 2 * h^4 * m + b^2 * (B + (c^2 + h^2) * m)))) * cos(beta)^2 * sin(alpha) + a^2 * m * ((b^2 * (A * B + C * h^2 * m + B * (C + h^2 * m)) + a^2 * ((b^2 * B + C * h^2) * m + A * (B + C + (b^2 + h^2) * m))) * sin(alpha) * sin(beta)^2 - 2 * c^2 * F * h * m * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) * sin(2 * beta))))
        )
    )))
end

function gammadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
    return (((
        -((pa * (b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) / (b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta) + b^2 * sin(alpha)^2 * (F * cos(beta) * sin(alpha) - h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0)) - ((b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) * (b^2 * (a^2 - c^2) * m * cos(alpha) * cos(beta) * sin(alpha) * sin(beta) - F * cos(alpha)^2 * cos(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + b^2 * sin(alpha) * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (b^2 * ((B + h^2 * m) * pa + F * pb * cos(beta)) * sin(alpha)^3 - (cos(alpha)^3 * (F * pa + (A - C + (-a^2 + c^2 + h^2) * m) * pb * cos(beta)) * (-a^2 - c^2 + (a^2 - c^2) * cos(2 * beta)) * sin(beta)) / 2.0 - c^2 * h * m * pa * cos(beta) * sin(2 * alpha) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - b^2 * h * m * pb * sin(alpha)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) + b^2 * cos(alpha) * sin(alpha) * ((F * pa + (A - C + (-a^2 + c^2 + h^2) * m) * pb * cos(beta)) * sin(alpha) * sin(beta) + h * m * pa * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^2 * (c^2 * F * pb * cos(beta)^3 * sin(alpha) + a^2 * F * pb * cos(beta) * sin(alpha) * sin(beta)^2 + a^2 * sin(beta)^2 * ((B + (a^2 - b^2 + h^2) * m) * pa * sin(alpha) - h * m * pb * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(beta)^2 * (c^2 * (B + (-b^2 + c^2 + h^2) * m) * pa * sin(alpha) + (a^2 - 2 * c^2) * h * m * pb * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))))) / ((b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta) - b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0) * (-((b^2 * (B + h^2 * m) * sin(alpha)^3 + F * cos(alpha)^3 * sin(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + cos(alpha)^2 * sin(alpha) * (c^2 * (B + (-b^2 + c^2 + h^2) * m) * cos(beta)^2 + a^2 * (B + (a^2 - b^2 + h^2) * m) * sin(beta)^2) + cos(alpha) * sin(alpha) * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - 2 * c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (b^2 * (a^2 - c^2) * m * cos(alpha) * cos(beta) * sin(alpha) * sin(beta) - F * cos(alpha)^2 * cos(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + b^2 * sin(alpha) * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))))) + (b^2 * B * sin(alpha)^2 + a^4 * m * cos(alpha)^2 * sin(beta)^2 + B * cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + m * (c^2 * cos(alpha) * cos(beta) - h * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))^2) * (-(b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta)) + b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0))) -
        (
            sec(alpha)^2 * (b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) * (A * cos(beta)^2 + C * sin(beta)^2 + (b^4 * m * cos(beta)^2 * sin(alpha)^2) / (b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) + (b^4 * m * sin(alpha)^2 * sin(beta)^2) / (b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) + (a^2 * m * cos(alpha) * sin(beta)^2 * (cos(alpha) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) - h * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) / (b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) + (m * cos(beta) * (c^2 * cos(alpha) * cos(beta) - h * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) * (cos(alpha) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) - h * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) / (b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - ((b^2 * (a^2 - c^2) * m * cos(alpha) * cos(beta) * sin(alpha) * sin(beta) - F * cos(alpha)^2 * cos(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + b^2 * sin(alpha) * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (-(((cos(alpha)^2 * (-a^2 - c^2 + (a^2 - c^2) * cos(2 * beta)) * (-A - C - a^2 * m - c^2 * m - h^2 * m - (A - C + (-a^2 + c^2 + h^2) * m) * cos(2 * beta))) / 4.0 + (b^2 * (A + C + 2 * b^2 * m + h^2 * m + (A - C + h^2 * m) * cos(2 * beta)) * sin(alpha)^2) / 2.0 - h * m * cos(alpha) * cos(beta) * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) * (b^2 * (B + h^2 * m) * sin(alpha)^3 + F * cos(alpha)^3 * sin(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + cos(alpha)^2 * sin(alpha) * (c^2 * (B + (-b^2 + c^2 + h^2) * m) * cos(beta)^2 + a^2 * (B + (a^2 - b^2 + h^2) * m) * sin(beta)^2) + cos(alpha) * sin(alpha) * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - 2 * c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))))) + (b^2 * (a^2 - c^2) * m * cos(alpha) * cos(beta) * sin(alpha) * sin(beta) - F * cos(alpha)^2 * cos(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + b^2 * sin(alpha) * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (-(b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta)) + b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0))) / ((b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) * (-((b^2 * (B + h^2 * m) * sin(alpha)^3 + F * cos(alpha)^3 * sin(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + cos(alpha)^2 * sin(alpha) * (c^2 * (B + (-b^2 + c^2 + h^2) * m) * cos(beta)^2 + a^2 * (B + (a^2 - b^2 + h^2) * m) * sin(beta)^2) + cos(alpha) * sin(alpha) * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - 2 * c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (b^2 * (a^2 - c^2) * m * cos(alpha) * cos(beta) * sin(alpha) * sin(beta) - F * cos(alpha)^2 * cos(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + b^2 * sin(alpha) * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))))) + (b^2 * B * sin(alpha)^2 + a^4 * m * cos(alpha)^2 * sin(beta)^2 + B * cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + m * (c^2 * cos(alpha) * cos(beta) - h * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))^2) * (-(b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta)) + b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0)))) *
            (((b^2 * (B + h^2 * m) * sin(alpha)^3 + F * cos(alpha)^3 * sin(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + cos(alpha)^2 * sin(alpha) * (c^2 * (B + (-b^2 + c^2 + h^2) * m) * cos(beta)^2 + a^2 * (B + (a^2 - b^2 + h^2) * m) * sin(beta)^2) + cos(alpha) * sin(alpha) * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - 2 * c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (b^2 * (a^2 - c^2) * m * cos(alpha) * cos(beta) * sin(alpha) * sin(beta) - F * cos(alpha)^2 * cos(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + b^2 * sin(alpha) * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) - (b^2 * B * sin(alpha)^2 + a^4 * m * cos(alpha)^2 * sin(beta)^2 + B * cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + m * (c^2 * cos(alpha) * cos(beta) - h * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))^2) * (-(b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta)) + b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0)) * (pg * (-(b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta)) + b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0) - pa * (b^2 * (B + h^2 * m) * sin(alpha)^4 + cos(alpha)^2 * sin(alpha)^2 * ((B * c^2 + b^4 * m + c^2 * (c^2 + h^2) * m + b^2 * (C - 2 * c^2 * m)) * cos(beta)^2 + (A * b^2 + a^4 * m + b^2 * (b^2 + h^2) * m + a^2 * (B - 2 * b^2 * m + h^2 * m)) * sin(beta)^2) + 2 * cos(alpha) * sin(alpha)^2 * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + 2 * cos(alpha)^3 * sin(beta) * (c^2 * F * cos(beta)^2 * sin(alpha) + a^2 * F * sin(alpha) * sin(beta)^2 + (a^2 - c^2) * h * m * cos(beta) * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + (cos(alpha)^4 * (4 * c^2 * C * cos(beta)^4 + 4 * a^2 * (A + h^2 * m) * sin(beta)^4 + (A * c^2 + a^4 * m + c^2 * (c^2 + h^2) * m + a^2 * (C - 2 * c^2 * m)) * sin(2 * beta)^2)) / 4.0)) - (b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * pb * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta) - b^2 * pb * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + pb * cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + pa * (b^2 * (B + h^2 * m) * sin(alpha)^3 + F * cos(alpha)^3 * sin(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + cos(alpha)^2 * sin(alpha) * (c^2 * (B + (-b^2 + c^2 + h^2) * m) * cos(beta)^2 + a^2 * (B + (a^2 - b^2 + h^2) * m) * sin(beta)^2) + cos(alpha) * sin(alpha) * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - 2 * c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) + ((A - C + (-a^2 + c^2 + h^2) * m) * pb * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0) * ((b^2 * (B + h^2 * m) * sin(alpha)^3 + F * cos(alpha)^3 * sin(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + cos(alpha)^2 * sin(alpha) * (c^2 * (B + (-b^2 + c^2 + h^2) * m) * cos(beta)^2 + a^2 * (B + (a^2 - b^2 + h^2) * m) * sin(beta)^2) + cos(alpha) * sin(alpha) * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - 2 * c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (-(b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta)) + b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) - ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0) - (b^2 * (a^2 - c^2) * m * cos(alpha) * cos(beta) * sin(alpha) * sin(beta) - F * cos(alpha)^2 * cos(beta) * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2) + b^2 * sin(alpha) * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)))) * (b^2 * (B + h^2 * m) * sin(alpha)^4 + cos(alpha)^2 * sin(alpha)^2 * ((B * c^2 + b^4 * m + c^2 * (c^2 + h^2) * m + b^2 * (C - 2 * c^2 * m)) * cos(beta)^2 + (A * b^2 + a^4 * m + b^2 * (b^2 + h^2) * m + a^2 * (B - 2 * b^2 * m + h^2 * m)) * sin(beta)^2) + 2 * cos(alpha) * sin(alpha)^2 * (b^2 * F * sin(alpha) * sin(beta) + (b^2 - c^2) * h * m * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + 2 * cos(alpha)^3 * sin(beta) * (c^2 * F * cos(beta)^2 * sin(alpha) + a^2 * F * sin(alpha) * sin(beta)^2 + (a^2 - c^2) * h * m * cos(beta) * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + (cos(alpha)^4 * (4 * c^2 * C * cos(beta)^4 + 4 * a^2 * (A + h^2 * m) * sin(beta)^4 + (A * c^2 + a^4 * m + c^2 * (c^2 + h^2) * m + a^2 * (C - 2 * c^2 * m)) * sin(2 * beta)^2)) / 4.0)))
        ) / ((b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta) + b^2 * sin(alpha)^2 * (F * cos(beta) * sin(alpha) - h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0) * (b^2 * (A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha) * cos(beta) * sin(alpha)^2 * sin(beta) - b^2 * sin(alpha)^2 * (-(F * cos(beta) * sin(alpha)) + h * m * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^2 * (c^2 * F * cos(beta)^3 * sin(alpha) + a^2 * F * cos(beta) * sin(alpha) * sin(beta)^2 + (a^2 - 2 * c^2) * h * m * cos(beta)^2 * sin(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * h * m * sin(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + ((A - C + (-a^2 + c^2 + h^2) * m) * cos(alpha)^3 * (a^2 + c^2 + (-a^2 + c^2) * cos(2 * beta)) * sin(2 * beta)) / 4.0) * (b^4 * (b^2 * m * (-F^2 + B * (b^2 + h^2) * m) + A * (C * h^2 * m + B * (C + b^2 * m)) + C * (-F^2 + (b^2 + h^2) * m * (B + h^2 * m))) * sin(alpha)^4 - (a^2 * b^2 * ((a^2 + b^2) * F^2 * m - 2 * A * C * (B + h^2 * m) + 2 * C * (F^2 - h^2 * m * (B + h^2 * m))) * sin(2 * alpha)^2 * sin(beta)^2) / 4.0 + 2 * b^2 * m * cos(alpha) * sin(alpha)^2 * (a^2 * b^2 * F * (C + (b^2 + h^2) * m) * sin(alpha) * sin(beta) - c^2 * h * (A * C + C * (b^2 + 2 * h^2) * m + B * (C + b^2 * m)) * cos(beta) * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + 2 * m * cos(alpha)^3 * (a^2 * b^2 * c^2 * F * (C + (c^2 + h^2) * m) * cos(beta)^2 * sin(alpha) * sin(beta) + a^4 * b^2 * F * (C + (a^2 + h^2) * m) * sin(alpha) * sin(beta)^3 - c^4 * C * h * (A + B + 2 * (c^2 + h^2) * m) * cos(beta)^3 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) - a^2 * c^2 * h * (A * (C + a^2 * m) + C * (B + (a^2 + 2 * h^2) * m)) * cos(beta) * sin(beta)^2 * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + cos(alpha)^4 * (c^4 * C * (-F^2 + A * (B + (c^2 + h^2) * m) + m * (B * (c^2 + h^2) + (c^4 + 6 * c^2 * h^2 + h^4) * m)) * cos(beta)^4 + a^2 * c^2 * m * ((A + B) * c^2 * C + a^2 * (C * (c^2 + h^2) * m + A * (B + C + (c^2 + h^2) * m))) * cos(beta)^2 * sin(beta)^2 + a^4 * (-(C * F^2) - a^2 * F^2 * m + C * h^2 * m * (B + (a^2 + h^2) * m) + A * (C + a^2 * m) * (B + (a^2 + h^2) * m)) * sin(beta)^4 - (a^2 * c^2 * (a^2 * F^2 * m - 2 * A * C * (B + h^2 * m) + 2 * C * (F^2 - h^2 * m * (B + 3 * c^2 * m + h^2 * m))) * sin(2 * beta)^2) / 4.0) + b^2 * cos(alpha)^2 * sin(alpha) * (c^2 * (b^2 * m * (-F^2 + B * (c^2 + h^2) * m) + A * (C * (c^2 + 2 * h^2) * m + B * (2 * C + b^2 * m)) + C * (-2 * F^2 + m * (B * c^2 + 2 * B * h^2 + 6 * c^2 * h^2 * m + 2 * h^4 * m + b^2 * (B + (c^2 + h^2) * m)))) * cos(beta)^2 * sin(alpha) + a^2 * m * ((b^2 * (A * B + C * h^2 * m + B * (C + h^2 * m)) + a^2 * ((b^2 * B + C * h^2) * m + A * (B + C + (b^2 + h^2) * m))) * sin(alpha) * sin(beta)^2 - 2 * c^2 * F * h * m * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2)) * sin(2 * beta)))))
    )))
end

#define the hamilton equation
# taken from Hamilton_notsubs.txt
function Hamilton(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
    alpha_dot = alphadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
    beta_dot = betadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
    gamma_dot = gammadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)

    return (g * m * (-(h * cos(alpha) * cos(beta)) + sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) + pa * alpha_dot + pb * beta_dot + pg * gamma_dot + (-(C * (sin(beta) * alpha_dot + cos(alpha) * cos(beta) * gamma_dot)^2) - B * (beta_dot + sin(alpha) * gamma_dot)^2 + 2 * F * (beta_dot + sin(alpha) * gamma_dot) * (cos(beta) * alpha_dot - cos(alpha) * sin(beta) * gamma_dot) - A * (cos(beta) * alpha_dot - cos(alpha) * sin(beta) * gamma_dot)^2) / 2.0 - (m * ((b^2 * sin(alpha) * (sin(beta) * alpha_dot + cos(alpha) * cos(beta) * gamma_dot) - (c^2 * cos(alpha) * cos(beta) - h * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) * (beta_dot + sin(alpha) * gamma_dot))^2 + (b^2 * cos(beta) * sin(alpha) * alpha_dot + cos(alpha) * sin(beta) * (a^2 * beta_dot + (a - b) * (a + b) * sin(alpha) * gamma_dot))^2 + (a^2 * cos(alpha) * sin(beta) * (sin(beta) * alpha_dot + cos(alpha) * cos(beta) * gamma_dot) + (c^2 * cos(alpha) * cos(beta) - h * sqrt(b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))) * (cos(beta) * alpha_dot - cos(alpha) * sin(beta) * gamma_dot))^2)) / (2 * (b^2 * sin(alpha)^2 + cos(alpha)^2 * (c^2 * cos(beta)^2 + a^2 * sin(beta)^2))))
end



# get the equations of motion by differentiating the Hamilton function using ForwardDiff (automatic differentiation)
function dydt_Hamilton_AD(y, p, t)
    alpha, beta, gamma, pa, pb, pg = y
    (g, m, h, A, B, C, F, a, b, c) = p

    d_alpha = ForwardDiff.derivative(x -> Hamilton(alpha, beta, gamma, x, pb, pg, g, m, h, a, b, c, A, B, C, F), pa)
    d_beta = ForwardDiff.derivative(x -> Hamilton(alpha, beta, gamma, pa, x, pg, g, m, h, a, b, c, A, B, C, F), pb)
    d_gamma = ForwardDiff.derivative(x -> Hamilton(alpha, beta, gamma, pa, pb, x, g, m, h, a, b, c, A, B, C, F), pg)

    d_pa = - ForwardDiff.derivative(x -> Hamilton(x, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F), alpha)
    d_pb = - ForwardDiff.derivative(x -> Hamilton(alpha, x, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F), beta)
    d_pg = - ForwardDiff.derivative(x -> Hamilton(alpha, beta, x, pa, pb, pg, g, m, h, a, b, c, A, B, C, F), gamma)

    return [d_alpha, d_beta, d_gamma, d_pa, d_pb, d_pg]
end


# set up the original schömer problem for Hamilton
function set_up_original_problem_for_Hamilton(y0_angles_omega)

     # Geometric parameters of the rattleback
     a = 0.5 * (1 + √(5))
     b = 1
     c = 1
 
 
     g = 9.81
     # calculating the total mass and the height/ distance center of mass and 0
     mE = 0.1
     mp = 0.05
     m = mE + 2 * mp
     h = mE / m * 3 * c/ 8
 
     A, B, C, F =  0.05796875, 0.0903294297749979, 0.12236067977499791, 0.025
 
     parameter = (g=g, m=m, h=h, A=A, B=B, C=C, F=F, a=a, b=b, c=c)
     
     y0_angles_d_angles = [y0_angles_omega[1:3]...,omega_to_angle_dot(y0_angles_omega...)...]
     y0 = [y0_angles_omega[1:3]...,
                     pa_from_anlges(y0_angles_d_angles..., g, m, h, a, b, c, A, B, C, F),
                     pb_from_anlges(y0_angles_d_angles..., g, m, h, a, b, c, A, B, C, F),
                     pg_from_anlges(y0_angles_d_angles..., g, m, h, a, b, c, A, B, C, F),]

     tspan = (0.0, 60.0)
 
     return y0, tspan, parameter
 end





# plot the omegas for hamilton solution
function plot_hamilton_omega(sol, ylims, parameterH)
    (g, m, h, A, B, C, F, a, b, c) = parameterH

    omega1 = zeros(length(sol))
    omega2 = zeros(length(sol))
    omega3 = zeros(length(sol))

    for i in 1:length(sol)
        alpha, beta, gamma, pa, pb, pg = sol[:, i]
        alpha_dot = alphadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
        beta_dot = betadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
        gamma_dot = gammadotfromp(alpha, beta, gamma, pa, pb, pg, g, m, h, a, b, c, A, B, C, F)
        omega1[i], omega2[i], omega3[i] = angle_dot_to_omega(alpha, beta, gamma, alpha_dot, beta_dot, gamma_dot)
    end


    lw = 2
    fontsize = 14
    fontsize2 = 18

    p = plot(sol.t, omega1, label=L"\omega_1",
    xguide = L"t",
    yguide = L"\omega_i",
    title = "Hamilton-Formulierung",
    legend = :topleft,
    titlefont = font(fontsize2,"Computer Modern"),
    guidefont = font("Computer Modern"),
    legendfont = font(fontsize,"Computer Modern"),
    size = (700, 500),
    grid = true,
    xlims=(first(sol.t), last(sol.t)),
    dpi = 300,
    ylims = ylims,
    lw = lw,
    legendfontsize=fontsize,
    xtickfontsize=fontsize,
    ytickfontsize=fontsize,
    ylabelfontsize=fontsize2,
    xlabelfontsize=fontsize2,
    )


    plot!(sol.t, omega2, label=L"\omega_2", lw = lw)
    plot!(sol.t, omega3, label=L"\omega_3", lw = lw)


    return p
end





